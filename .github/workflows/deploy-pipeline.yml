name: Deploy pipeline

on:
  push:
    branches:
      - 'release/**'

jobs:
  ### BACKEND JOBS ###
  compile-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 21
      - run: |
          cd statrack
          ./mvnw clean compile

  test-backend:
    runs-on: ubuntu-latest
    needs: compile-backend
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 21
      - run: |
          cd statrack
          ./mvnw test

  package-backend:
    runs-on: ubuntu-latest
    needs: [compile-backend, test-backend]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 21
      - run: |
          cd statrack
          ./mvnw package

  build-backend-image:
    runs-on: ubuntu-latest
    needs: package-backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 21

      - name: Extract version
        id: version
        run: |
          cd statrack
          VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./statrack
          file: ./statrack/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/statrack:${{ steps.version.outputs.VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/statrack:latest

  ### FRONTEND JOBS ###
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: |
          cd frontend
          npm ci
          npm run build
        env:
          NEXT_PUBLIC_API_URL: ${{ secrets.NEXT_PUBLIC_API_URL }}
          NEXT_PUBLIC_HOST_NAME: ${{ secrets.NEXT_PUBLIC_HOST_NAME }}
          NEXT_PUBLIC_GH_LINK: ${{ secrets.NEXT_PUBLIC_GH_LINK }}
          NEXT_PUBLIC_LN_LINK: ${{ secrets.NEXT_PUBLIC_LN_LINK }}
          NEXT_PUBLIC_ML_LINK: ${{ secrets.NEXT_PUBLIC_ML_LINK }}
          ACCESS_TOKEN_EXPIRY: ${{ secrets.ACCESS_TOKEN_EXPIRY }}
          REFRESH_TOKEN_EXPIRY: ${{ secrets.REFRESH_TOKEN_EXPIRY }}
          GOOGLE_CLIENT_ID: ${{ secrets.GOOGLE_CLIENT_ID }}
          GOOGLE_CLIENT_SECRET: ${{ secrets.GOOGLE_CLIENT_SECRET }}
          NEXTAUTH_SECRET: ${{ secrets.NEXTAUTH_SECRET }}
          NEXTAUTH_URL: ${{ secrets.NEXTAUTH_URL }}

  # Build & push frontend Docker image
  push-frontend-image:
    runs-on: ubuntu-latest
    needs: build-frontend
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: 20

      - name: Extract version
        id: version
        run: |
          cd statrack
          VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push frontend image
        uses: docker/build-push-action@v5
        with:
          context: ./frontend
          file: ./frontend/Dockerfile
          push: true
          tags: |
            ${{ secrets.DOCKERHUB_USERNAME }}/statrack-frontend:${{ steps.version.outputs.VERSION }}
            ${{ secrets.DOCKERHUB_USERNAME }}/statrack-frontend:latest


  ### DEPLOY JOB ###
  deploy:
    runs-on: ubuntu-latest
    needs: [build-backend-image, push-frontend-image]
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup SSH
        run: |
          mkdir -p ~/.ssh
          echo "${{ secrets.VPS_SSH_KEY }}" > ~/.ssh/id_rsa
          chmod 600 ~/.ssh/id_rsa
          ssh-keyscan -H ${{ secrets.VPS_IP }} >> ~/.ssh/known_hosts

      - name: Create deployment folder
        run: ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} "mkdir -p ci-cd"

      - name: Copy deployment files
        run: |
          scp docker-compose.deploy.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:ci-cd/docker-compose.yml
          scp nginx.conf ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:ci-cd/nginx.conf

      - name: Set env and deploy
        run: |
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} << EOF
          set -e
          cd ci-cd
          
          # Create backend .env
          echo "EMAIL_HOST_NAME=${{ secrets.EMAIL_HOST_NAME }}" > .env.backend
          echo "EMAIL_USER_NAME=${{ secrets.EMAIL_USER_NAME }}" >> .env.backend
          echo "EMAIL_APP_PASSWORD=${{ secrets.EMAIL_APP_PASSWORD }}" >> .env.backend
          echo "EMAIL_PORT=${{ secrets.EMAIL_PORT }}" >> .env.backend
          echo "FRONTEND_URL=${{ secrets.FRONTEND_URL }}" >> .env.backend
          echo "JWT_SECRET=${{ secrets.JWT_SECRET }}" >> .env.backend
          echo "LOG_LEVEL=${{ secrets.LOG_LEVEL }}" >> .env.backend
          echo "POSTGRES_USER=${{ secrets.POSTGRES_USER }}" >> .env.backend
          echo "POSTGRES_PASSWORD=${{ secrets.POSTGRES_PASSWORD }}" >> .env.backend
          echo "RABBITMQ_DEFAULT_PASS=${{ secrets.RABBITMQ_DEFAULT_PASS }}" >> .env.backend
          echo "RABBITMQ_DEFAULT_USER=${{ secrets.RABBITMQ_DEFAULT_USER }}" >> .env.backend
          
          # Create frontend .env
          echo "NEXT_PUBLIC_API_URL=${{ secrets.NEXT_PUBLIC_API_URL }}" > .env.frontend
          echo "NEXT_PUBLIC_GH_LINK=${{ secrets.NEXT_PUBLIC_GH_LINK }}" >> .env.frontend
          echo "NEXT_PUBLIC_LN_LINK=${{ secrets.NEXT_PUBLIC_LN_LINK }}" >> .env.frontend
          echo "NEXT_PUBLIC_ML_LINK=${{ secrets.NEXT_PUBLIC_ML_LINK }}" >> .env.frontend
          echo "NEXT_PUBLIC_HOST_NAME=${{ secrets.NEXT_PUBLIC_HOST_NAME }}" >> .env.frontend
          echo "ACCESS_TOKEN_EXPIRY=${{ secrets.ACCESS_TOKEN_EXPIRY }}" >> .env.frontend
          echo "REFRESH_TOKEN_EXPIRY=${{ secrets.REFRESH_TOKEN_EXPIRY }}" >> .env.frontend
          echo "GOOGLE_CLIENT_ID=${{ secrets.GOOGLE_CLIENT_ID }}" >> .env.frontend
          echo "GOOGLE_CLIENT_SECRET=${{ secrets.GOOGLE_CLIENT_SECRET }}" >> .env.frontend
          echo "NEXTAUTH_SECRET=${{ secrets.NEXTAUTH_SECRET }}" >> .env.frontend
          echo "NEXTAUTH_URL=${{ secrets.NEXTAUTH_URL }}" >> .env.frontend
          
          docker compose pull
          docker compose up -d --remove-orphans
          EOF
    

  ### E2E TEST JOB ###
#  e2e-tests:
#    runs-on: ubuntu-latest
#    needs: deploy
#    steps:
#      - uses: actions/checkout@v4
#      - uses: actions/setup-node@v4
#        with:
#          node-version: 20
#      - run: |
#          cd frontend
#          npm ci
#          npx playwright install
#          npx playwright test
#        working-directory: ./tests
