name: Full Stack Pipeline

on:
  push:
    paths:
      - 'statrack/**'
      - 'frontend/**'
      - 'frontend/tests/**'
      - 'docker-compose.yml'
      - '.github/workflows/*'

jobs:
  ### BACKEND JOBS ###
  compile-backend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 21
      - run: |
          cd statrack
          ./mvnw clean compile

  test-backend:
    runs-on: ubuntu-latest
    needs: compile-backend
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 21
      - run: |
          cd statrack
          ./mvnw test

  package-backend:
    runs-on: ubuntu-latest
    needs: [compile-backend, test-backend]
    steps:
      - uses: actions/checkout@v4
        with:
          fetch-depth: 0
      - uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 21
      - run: |
          cd statrack
          ./mvnw package

  build-backend-image:
    runs-on: ubuntu-latest
    needs: package-backend
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-java@v4
        with:
          distribution: 'corretto'
          java-version: 21

      - name: Extract version
        id: version
        run: |
          cd statrack
          VERSION=$(./mvnw help:evaluate -Dexpression=project.version -q -DforceStdout)
          echo "VERSION=$VERSION" >> $GITHUB_OUTPUT

      - name: Login to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKERHUB_USERNAME }}
          password: ${{ secrets.DOCKERHUB_TOKEN }}

      - name: Build and push backend image
        uses: docker/build-push-action@v5
        with:
          context: ./statrack
          file: ./statrack/Dockerfile
          push: true
          tags: ${{ secrets.DOCKERHUB_USERNAME }}/statrack:${{ steps.version.outputs.VERSION }}
          build-args: |
            PROFILE=dev
            APP_VERSION=${{ steps.version.outputs.VERSION }}

  ### FRONTEND JOBS ###
  build-frontend:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: |
          cd frontend
          npm ci
          npm run build

  # Optional: build & push frontend Docker image here, if needed

  ### DEPLOY JOB ###
  deploy:
    runs-on: ubuntu-latest
    needs: [build-backend-image, build-frontend]
    steps:
      - name: Create deployment folder
        run: ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} "mkdir -p ci-cd"

      - name: Copy docker-compose file
        run: scp docker-compose.yml ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }}:ci-cd/docker-compose.yml

      - name: Set env and deploy
        run: |
          ssh ${{ secrets.VPS_USERNAME }}@${{ secrets.VPS_IP }} << EOF
          export EMAIL_HOST_NAME=${{ secrets.EMAIL_HOST_NAME }}
          export EMAIL_USER_NAME=${{ secrets.EMAIL_USER_NAME }}
          export EMAIL_APP_PASSWORD=${{ secrets.EMAIL_APP_PASSWORD }}
          cd ci-cd
          docker compose pull -q
          docker compose up -d
          EOF

  ### E2E TEST JOB ###
  e2e-tests:
    runs-on: ubuntu-latest
    needs: deploy
    steps:
      - uses: actions/checkout@v4
      - uses: actions/setup-node@v4
        with:
          node-version: 20
      - run: |
          cd frontend
          npm ci
          npx playwright install
          npx playwright test
        working-directory: ./tests
